- Bare minimum cpp library [Day 0]
	o Allocator (libc wrapper)
	o Pairs
	o Type traits

- Serialization module [Day 1]
	o Put in serializer (Serializer) namespace
	o Template functions for de/serializing classes and primitive types
		(With the exception of floats)
		+ Unsigned primitive types
		+ Signed primitive types
		+ C-strings
		+ Arrays (can be done later)
		+ General objects with de/serialize() methods defined
	o Stream class
		+ operator += to concatenate streams
		+ Stream(void) to load an empty stream
		+ Stream(T) to load an object
		+ Stream(const uint8_t*, size_t) to load from a byte array

- Trie class [Day 2]
	o Wrapper of C trie library

- JSON module [?]
	o Wrapper of json-c

- Movie class [Day 3, Day 7]
	(Submodules (nested classes)) [Day 3, Day 5]
	o Genre set subclass [Day 3]
		+ 32 genre bitfields
		(Methods)
		+ include(enum {genre_1, genre_2... genre_n})
		+ include(const char* genreName)
		+ remove(enum {genre_1, genre_2... genre_n})
		+ remove(const char* genreName)
		+ empty()
		+ matches(const Movie& m)
	o Criteria subclass [Day 4]
		+ Genre OR-list
		+ Genre OR-blacklist
		+ Min/max rating
		+ Min/max release year
		+ Min/max upload year
		(Methods)
		+ Setters for all variables
		+ contains(const Movie& m) to return satisfiability
	o Order subclass [Day 5]
		+ Order types (decide defaults)
			= Rating
			= Time of upload
			= Year of release
		+ Order weight (a/descending, irrelevant)
		(Methods)
		+ prioritize(ord_type, ord_weight)
		+ prioritize(<ord_type, ord_weight>)
		+ operator()(const Movie& m1, const Movie& m2) to return order
		+ compare(const Movie& m1, const Movie& m2) to return order
	(Main module) [Day 6, Day 7]
	(Data)
	o YTS id
	o Title
	o Genre set (bitfield)
	o Rating
	o Year of release
	o Time of upload
	(Methods)
	o Constructor to read from JSON
	o Title getter
	o ID getter
	o TODO: JSON serializer after completing JSON module

TODO: Complete and test each module

- DB module [?]
	o Internal filename
	o Close on every operation
	(Methods/operations)
	o Constructor taking file name, creating file if non-existant
	o forEach((buffer, length) => {})
	o forEach((buffer, length, entryPos) => {})
	o addEntry(buffer, length) returning new entryPos
	o forEntryAt(entryPos, (buffer, length) => {})
	o [Optional] removeEntryAt(entryPos)

- List class [?]
	(Methods)
	o operator+=(const ListItem& item)
	o operator+=(const List& List)
	o filter((const ListItem&) => true/false) returning List of T& refs
	o sort((const ListItem&, const ListItem&) => -1/0/1)
	o size() returning a size_t
	o Must support list iteration

- Searcher class [?]
	o For type T, internally a suffix trie (Trie<List<T>>)
	(Methods)
	o insert(const char* key, const T& val)
	o const List<T>& searchAll(const char* keySubstr, int limit)

- MovieLibrary module [?]
	o Internal Searcher<Movie>
	o Internal movie JSON db
	o Internal array mapping id to entryPos of movie JSON db
	o Possible internal result cache for efficient next page, requires:
		+ Optimistically fetching more pages from the searcher
		+ Equality overloadings for Movie::Criteria and Movie::Order
		+ Saving the last accessed page
		+ Requires forward and backward list iteration, so prev pointers
	o Additions and retrievals must be thread-safe, use a lock
	(Methods)
	o Constructor taking file name, creating file if non-existant
	o setPageSize()
	o addNewMovie(const char* json, size_t len)
	o addNewMovie(const char* json /* NULL-terminated */)
	o getMovies(const char* str, const Criteria& c, const Order& o, int page)
		+ str must be s search substring
		+ Must return short movie array JSON string (from searcher)
	o getMovieById(int id)
		+ Must return long movie JSON string (from db object)

- YIFY scraper module [?]
	o Internal MovieLibrary
	o Internal scraping thread
	(Methods)
	o Constructor taking MovieLibrary object reference
	o setRefreshInterval(set in several minutes)
	o start
	o stop

- REST server framework [?]
	(Methods)
	o Callback function taking key->val mappings from GET string and URI
	o start
	o stop

- Transmission interface module [?]
	<Takes yify id, reports all and average progress>
	+ availableMemory
	+ startDownload
	+ pauseDownload
	+ cancelDownload
	+ deleteFile
	+ getProgress
	+ getFileURI

- Main yify-home thread [?]
	o Use REST framework, YIFY scraper, MovieLibrary, TransmissionsIface
	o Should respond to search queries, torrent queries and movie queries
